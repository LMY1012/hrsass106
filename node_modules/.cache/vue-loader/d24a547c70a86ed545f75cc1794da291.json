{"remainingRequest":"C:\\Users\\陌上花开，可缓缓归归矣\\Desktop\\hrsaas\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\陌上花开，可缓缓归归矣\\Desktop\\hrsaas\\src\\views\\departments\\index.vue?vue&type=style&index=0&id=e735600c&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\陌上花开，可缓缓归归矣\\Desktop\\hrsaas\\src\\views\\departments\\index.vue","mtime":1656297760388},{"path":"C:\\Users\\陌上花开，可缓缓归归矣\\Desktop\\hrsaas\\node_modules\\css-loader\\dist\\cjs.js","mtime":1655089563621},{"path":"C:\\Users\\陌上花开，可缓缓归归矣\\Desktop\\hrsaas\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1655089565862},{"path":"C:\\Users\\陌上花开，可缓缓归归矣\\Desktop\\hrsaas\\node_modules\\postcss-loader\\src\\index.js","mtime":1655089564685},{"path":"C:\\Users\\陌上花开，可缓缓归归矣\\Desktop\\hrsaas\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655089562873},{"path":"C:\\Users\\陌上花开，可缓缓归归矣\\Desktop\\hrsaas\\node_modules\\vue-loader\\lib\\index.js","mtime":1655089565085}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi50cmVlLWNhcmQgew0KICBwYWRkaW5nOiAzMHB4ICAxNDBweDsNCiAgZm9udC1zaXplOjE0cHg7DQp9DQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/departments","sourcesContent":["<template>\r\n  <div v-loading=\"loading\" class=\"dashboard-container\">\r\n    <div class=\"app-container\">\r\n      <!-- 放置组织架构内容 -->\r\n      <el-card class=\"tree-card\">\r\n        <!-- 主要内容 -->\r\n        <tree-tools :tree-node=\"company\" :is-root=\"true\" @addDepts=\"addDepts\" />\r\n        <!-- 放置一个树形 -->\r\n        <el-tree :data=\"departs\" :props=\"defaultProps\" default-expand-all>\r\n          <!-- 写一个显示的结构 插槽 作用域插槽 slot-scope-->\r\n          <!-- 插槽  slot=\"a\" 具名插槽-->\r\n          <!-- 插槽   匿名插槽-->\r\n          <!--  v-slot  先执行作用域插槽的取值 再传给tree-node-->\r\n          <template v-slot=\"{ data }\">\r\n            <tree-tools :tree-node=\"data\" @editDepts=\"editDepts\" @addDepts=\"addDepts\" @delDepts=\"getDepartments\" />\r\n          </template>\r\n        </el-tree>\r\n      </el-card>\r\n    </div>\r\n    <!-- 放置一个新增弹层组件 sync修饰符 必须写 -->\r\n    <add-dept ref=\"addDept\" :show-dialog.sync=\"showDialog\" :tree-node=\"node\" @addDepts=\"getDepartments\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport TreeTools from './components/tree-tools'\r\nimport AddDept from './components/add-dept'\r\n\r\nimport { getDepartments } from '@/api/departments'\r\nimport { transListToTreeData } from '@/utils'\r\nexport default {\r\n  components: {\r\n    TreeTools,\r\n    AddDept\r\n  },\r\n  data() {\r\n    return {\r\n      loading: false,\r\n      showDialog: false, // 控制弹层变量\r\n      company: { },\r\n      departs: [],\r\n      defaultProps: {\r\n        label: 'name'\r\n      },\r\n      node: null // 专门来存储当前操作的节点\r\n    }\r\n  },\r\n  created() {\r\n    this.getDepartments()\r\n  },\r\n  methods: {\r\n    async getDepartments() {\r\n      this.loading = true\r\n      const { depts, companyName } = await getDepartments()\r\n      this.company = { manager: '负责人', name: companyName, id: '' }\r\n      this.departs = transListToTreeData(depts, '')\r\n      setTimeout(() => (this.loading = false)\r\n        , 500)\r\n    },\r\n    // 自定义事件的接收方法 node就是操作的节点\r\n    addDepts(node) {\r\n      this.showDialog = true\r\n      this.node = node // 记录node是为了记住往哪个部门下 添加子部门\r\n    },\r\n    async editDepts(node) {\r\n      await this.$refs.addDept.getDepartDetail(node.id)\r\n      this.showDialog = true\r\n      this.node = node // 记录当前点击的编辑节点\r\n      // 调用子组件方法？父组件  => 子组件方法\r\n    }\r\n\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n.tree-card {\r\n  padding: 30px  140px;\r\n  font-size:14px;\r\n}\r\n</style>\r\n"]}]}